/// <reference types="react-native-reanimated" />
import type { HiddenLocation } from '../hooks/useHiddenLocation';
import { PanningDirections, PanningDirectionsEnum } from '../panView';
import { AnimationNotifierEndProps, TransitionViewAnimationType } from './useAnimationEndNotifier';
declare const TransitionViewDirectionEnum: typeof PanningDirectionsEnum;
declare type TransitionViewDirection = PanningDirections;
export { TransitionViewAnimationType, TransitionViewDirectionEnum, TransitionViewDirection };
interface Delay {
    enter?: number;
    exit?: number;
}
export interface AnimatedTransitionProps extends AnimationNotifierEndProps {
    /**
     * Callback to the animation start.
     */
    onAnimationStart?: (animationType: TransitionViewAnimationType) => void;
    /**
     * If this is given there will be an enter animation from this direction.
     */
    enterFrom?: TransitionViewDirection;
    /**
     * If this is given there will be an exit animation to this direction.
     */
    exitTo?: TransitionViewDirection;
    /**
     * Delay the enter \ exit animation.
     */
    delay?: Delay;
    hiddenLocation: HiddenLocation;
}
export default function useAnimatedTransition(props: AnimatedTransitionProps): {
    animateIn: () => void;
    animateOut: () => void;
    translation: {
        x: import("react-native-reanimated").SharedValue<number>;
        y: import("react-native-reanimated").SharedValue<number>;
    };
    isMounted: import("react-native-reanimated").SharedValue<boolean>;
};
